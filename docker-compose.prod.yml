version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: avara-postgres-prod
    environment:
      POSTGRES_DB: avara
      POSTGRES_USER: avara
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-avara123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - avara-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U avara"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Medusa Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: avara-backend-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://avara:${POSTGRES_PASSWORD:-avara123}@postgres:5432/avara
      STORE_CORS: ${STORE_CORS:-http://localhost:8000}
      ADMIN_CORS: ${ADMIN_CORS:-http://localhost:7001}
      AUTH_CORS: ${AUTH_CORS:-http://localhost:8000}
      JWT_SECRET: ${JWT_SECRET}
      COOKIE_SECRET: ${COOKIE_SECRET}
    ports:
      - "9000:9000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - avara-network
    restart: unless-stopped

  # Next.js Storefront
  storefront:
    build:
      context: .
      dockerfile: Dockerfile.storefront
    container_name: avara-storefront-prod
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_MEDUSA_BACKEND_URL: http://backend:9000
    ports:
      - "8000:8000"
    depends_on:
      - backend
    networks:
      - avara-network
    restart: unless-stopped

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: avara-redis-prod
    ports:
      - "6379:6379"
    networks:
      - avara-network
    volumes:
      - redis_data:/data
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  avara-network:
    driver: bridge 